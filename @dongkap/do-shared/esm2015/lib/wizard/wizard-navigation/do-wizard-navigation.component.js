import { Component } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../services/do-wizard.service";
import * as i2 from "@angular/common";
import * as i3 from "@ngx-translate/core";
export class DoWizardNavigationComponent {
    constructor(service) {
        this.service = service;
    }
    ngOnInit() {
        this.stepData$ = this.service.getStepDataChangesAsObservable();
        this.service.getCurrentStepDataAsObservable().subscribe(stepData => this.currentStepData = stepData);
        this.wizardOptions = this.service.wizardOptions;
    }
    goToStep(stepData) {
        if ((this.currentStepData && this.currentStepData.options && this.currentStepData.options.disableNavigation)
            || stepData.order >= this.currentStepData.order) {
            return;
        }
        this.service.navigateToStep(stepData);
    }
}
DoWizardNavigationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DoWizardNavigationComponent, deps: [{ token: i1.DoWizardService }], target: i0.ɵɵFactoryTarget.Component });
DoWizardNavigationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DoWizardNavigationComponent, selector: "do-wizard-navigation", ngImport: i0, template: "<div class=\"do-wizard-navigation-container\">\n  <nav class=\"do-wizard-navigation\">\n    <ul class=\"do-wizard-navigation-list\">\n      <li *ngFor=\"let stepData of stepData$ | async\" class=\"do-wizard-navigation-list-item\" (click)=\"goToStep(stepData);\"\n        [ngClass]=\"{\n          'do-wizard-navigation-list-item-first': stepData?.order === 1\n        }\">\n        <div *ngIf=\"stepData?.order < currentStepData?.order\"\n             [ngClass]=\"{\n               'do-wizard-navigation-link': !currentStepData?.options.disableNavigation,\n               'do-wizard-navigation-disabled': currentStepData?.options.disableNavigation\n             }\">\n          <span class=\"do-wizard-navigation-label\">\n            <span [innerHTML]=\"stepData.options.icon || wizardOptions.navBar.icons.previous\" class=\"do-wizard-navigation-icon\"></span>\n            {{ stepData.options.title | translate }}\n          </span>\n        </div>\n\n        <div\n          *ngIf=\"stepData?.order === currentStepData?.order\"\n          class=\"do-wizard-navigation-active\">\n          <span class=\"do-wizard-navigation-label\">\n            <span [innerHTML]=\"stepData.options.icon || wizardOptions.navBar.icons.current\" class=\"do-wizard-navigation-icon\"></span>\n            {{ stepData.options.title | translate }}\n          </span>\n        </div>\n\n        <div *ngIf=\"stepData?.order > currentStepData?.order\"\n             class=\"do-wizard-navigation-disabled\">\n          <span class=\"do-wizard-navigation-label\">\n            <span [innerHTML]=\"stepData.options.icon || wizardOptions.navBar.icons.next\" class=\"do-wizard-navigation-icon\"></span>\n            {{ stepData.options.title | translate }}\n          </span>\n        </div>\n      </li>\n    </ul>\n  </nav>\n</div>\n", styles: [""], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i2.AsyncPipe, "translate": i3.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DoWizardNavigationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'do-wizard-navigation',
                    templateUrl: './do-wizard-navigation.component.html',
                    styleUrls: ['./do-wizard-navigation.component.scss']
                }]
        }], ctorParameters: function () { return [{ type: i1.DoWizardService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG8td2l6YXJkLW5hdmlnYXRpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vQGRvbmdrYXAvZG8tc2hhcmVkL3NyYy9saWIvd2l6YXJkL3dpemFyZC1uYXZpZ2F0aW9uL2RvLXdpemFyZC1uYXZpZ2F0aW9uLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL0Bkb25na2FwL2RvLXNoYXJlZC9zcmMvbGliL3dpemFyZC93aXphcmQtbmF2aWdhdGlvbi9kby13aXphcmQtbmF2aWdhdGlvbi5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLE1BQU0sZUFBZSxDQUFDOzs7OztBQVVsRCxNQUFNLE9BQU8sMkJBQTJCO0lBTXRDLFlBQW9CLE9BQXdCO1FBQXhCLFlBQU8sR0FBUCxPQUFPLENBQWlCO0lBQUksQ0FBQztJQUVqRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLDhCQUE4QixFQUFFLENBQUM7UUFDL0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyw4QkFBOEIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLEdBQUcsUUFBUSxDQUFDLENBQUM7UUFDckcsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztJQUNsRCxDQUFDO0lBRU0sUUFBUSxDQUFDLFFBQTBCO1FBQ3hDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDO2VBQ3JHLFFBQVEsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUU7WUFDbkQsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7eUhBcEJVLDJCQUEyQjs2R0FBM0IsMkJBQTJCLDREQ1Z4QyxreERBc0NBOzRGRDVCYSwyQkFBMkI7a0JBTHZDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHNCQUFzQjtvQkFDaEMsV0FBVyxFQUFFLHVDQUF1QztvQkFDcEQsU0FBUyxFQUFFLENBQUMsdUNBQXVDLENBQUM7aUJBQ3JEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERvV2l6YXJkU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2RvLXdpemFyZC5zZXJ2aWNlJztcbmltcG9ydCB7IERvV2l6YXJkU3RlcERhdGEgfSBmcm9tICcuLi93aXphcmQtc3RlcC9kby13aXphcmQtc3RlcC1kYXRhLmludGVyZmFjZSc7XG5pbXBvcnQgeyBEb1dpemFyZE9wdGlvbnMgfSBmcm9tICcuLi93aXphcmQtb3B0aW9ucy9kby13aXphcmQtb3B0aW9ucy5pbnRlcmZhY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkby13aXphcmQtbmF2aWdhdGlvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9kby13aXphcmQtbmF2aWdhdGlvbi5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2RvLXdpemFyZC1uYXZpZ2F0aW9uLmNvbXBvbmVudC5zY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgRG9XaXphcmROYXZpZ2F0aW9uQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgcHVibGljIHN0ZXBEYXRhJDtcbiAgcHVibGljIGN1cnJlbnRTdGVwRGF0YTtcblxuICBwdWJsaWMgd2l6YXJkT3B0aW9uczogRG9XaXphcmRPcHRpb25zO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2VydmljZTogRG9XaXphcmRTZXJ2aWNlKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLnN0ZXBEYXRhJCA9IHRoaXMuc2VydmljZS5nZXRTdGVwRGF0YUNoYW5nZXNBc09ic2VydmFibGUoKTtcbiAgICB0aGlzLnNlcnZpY2UuZ2V0Q3VycmVudFN0ZXBEYXRhQXNPYnNlcnZhYmxlKCkuc3Vic2NyaWJlKHN0ZXBEYXRhID0+IHRoaXMuY3VycmVudFN0ZXBEYXRhID0gc3RlcERhdGEpO1xuICAgIHRoaXMud2l6YXJkT3B0aW9ucyA9IHRoaXMuc2VydmljZS53aXphcmRPcHRpb25zO1xuICB9XG5cbiAgcHVibGljIGdvVG9TdGVwKHN0ZXBEYXRhOiBEb1dpemFyZFN0ZXBEYXRhKSB7XG4gICAgaWYgKCh0aGlzLmN1cnJlbnRTdGVwRGF0YSAmJiB0aGlzLmN1cnJlbnRTdGVwRGF0YS5vcHRpb25zICYmIHRoaXMuY3VycmVudFN0ZXBEYXRhLm9wdGlvbnMuZGlzYWJsZU5hdmlnYXRpb24pXG4gICAgICAgIHx8IHN0ZXBEYXRhLm9yZGVyID49IHRoaXMuY3VycmVudFN0ZXBEYXRhLm9yZGVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2VydmljZS5uYXZpZ2F0ZVRvU3RlcChzdGVwRGF0YSk7XG4gIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJkby13aXphcmQtbmF2aWdhdGlvbi1jb250YWluZXJcIj5cbiAgPG5hdiBjbGFzcz1cImRvLXdpemFyZC1uYXZpZ2F0aW9uXCI+XG4gICAgPHVsIGNsYXNzPVwiZG8td2l6YXJkLW5hdmlnYXRpb24tbGlzdFwiPlxuICAgICAgPGxpICpuZ0Zvcj1cImxldCBzdGVwRGF0YSBvZiBzdGVwRGF0YSQgfCBhc3luY1wiIGNsYXNzPVwiZG8td2l6YXJkLW5hdmlnYXRpb24tbGlzdC1pdGVtXCIgKGNsaWNrKT1cImdvVG9TdGVwKHN0ZXBEYXRhKTtcIlxuICAgICAgICBbbmdDbGFzc109XCJ7XG4gICAgICAgICAgJ2RvLXdpemFyZC1uYXZpZ2F0aW9uLWxpc3QtaXRlbS1maXJzdCc6IHN0ZXBEYXRhPy5vcmRlciA9PT0gMVxuICAgICAgICB9XCI+XG4gICAgICAgIDxkaXYgKm5nSWY9XCJzdGVwRGF0YT8ub3JkZXIgPCBjdXJyZW50U3RlcERhdGE/Lm9yZGVyXCJcbiAgICAgICAgICAgICBbbmdDbGFzc109XCJ7XG4gICAgICAgICAgICAgICAnZG8td2l6YXJkLW5hdmlnYXRpb24tbGluayc6ICFjdXJyZW50U3RlcERhdGE/Lm9wdGlvbnMuZGlzYWJsZU5hdmlnYXRpb24sXG4gICAgICAgICAgICAgICAnZG8td2l6YXJkLW5hdmlnYXRpb24tZGlzYWJsZWQnOiBjdXJyZW50U3RlcERhdGE/Lm9wdGlvbnMuZGlzYWJsZU5hdmlnYXRpb25cbiAgICAgICAgICAgICB9XCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJkby13aXphcmQtbmF2aWdhdGlvbi1sYWJlbFwiPlxuICAgICAgICAgICAgPHNwYW4gW2lubmVySFRNTF09XCJzdGVwRGF0YS5vcHRpb25zLmljb24gfHwgd2l6YXJkT3B0aW9ucy5uYXZCYXIuaWNvbnMucHJldmlvdXNcIiBjbGFzcz1cImRvLXdpemFyZC1uYXZpZ2F0aW9uLWljb25cIj48L3NwYW4+XG4gICAgICAgICAgICB7eyBzdGVwRGF0YS5vcHRpb25zLnRpdGxlIHwgdHJhbnNsYXRlIH19XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2XG4gICAgICAgICAgKm5nSWY9XCJzdGVwRGF0YT8ub3JkZXIgPT09IGN1cnJlbnRTdGVwRGF0YT8ub3JkZXJcIlxuICAgICAgICAgIGNsYXNzPVwiZG8td2l6YXJkLW5hdmlnYXRpb24tYWN0aXZlXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJkby13aXphcmQtbmF2aWdhdGlvbi1sYWJlbFwiPlxuICAgICAgICAgICAgPHNwYW4gW2lubmVySFRNTF09XCJzdGVwRGF0YS5vcHRpb25zLmljb24gfHwgd2l6YXJkT3B0aW9ucy5uYXZCYXIuaWNvbnMuY3VycmVudFwiIGNsYXNzPVwiZG8td2l6YXJkLW5hdmlnYXRpb24taWNvblwiPjwvc3Bhbj5cbiAgICAgICAgICAgIHt7IHN0ZXBEYXRhLm9wdGlvbnMudGl0bGUgfCB0cmFuc2xhdGUgfX1cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgKm5nSWY9XCJzdGVwRGF0YT8ub3JkZXIgPiBjdXJyZW50U3RlcERhdGE/Lm9yZGVyXCJcbiAgICAgICAgICAgICBjbGFzcz1cImRvLXdpemFyZC1uYXZpZ2F0aW9uLWRpc2FibGVkXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJkby13aXphcmQtbmF2aWdhdGlvbi1sYWJlbFwiPlxuICAgICAgICAgICAgPHNwYW4gW2lubmVySFRNTF09XCJzdGVwRGF0YS5vcHRpb25zLmljb24gfHwgd2l6YXJkT3B0aW9ucy5uYXZCYXIuaWNvbnMubmV4dFwiIGNsYXNzPVwiZG8td2l6YXJkLW5hdmlnYXRpb24taWNvblwiPjwvc3Bhbj5cbiAgICAgICAgICAgIHt7IHN0ZXBEYXRhLm9wdGlvbnMudGl0bGUgfCB0cmFuc2xhdGUgfX1cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9saT5cbiAgICA8L3VsPlxuICA8L25hdj5cbjwvZGl2PlxuIl19