import { Injector, EventEmitter } from '@angular/core';
import { OnInit } from '@angular/core';
import { OnDestroy } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { ColumnMode, SelectionType, SortType } from '@swimlane/ngx-datatable';
import { HttpFactoryService, HttpBaseModel } from '@dongkap/do-core';
import { Page, Sort, Keyword, DatatableFilter, DatatableColumn } from './models/datatable.model';
import * as i0 from "@angular/core";
export declare class DoDatatableComponent implements OnInit, OnDestroy {
    locale: string;
    injector: Injector;
    rows: any[];
    columns: DatatableColumn[];
    filters: DatatableFilter[];
    selected: any[];
    limit: number | undefined;
    count: number;
    offset: number;
    externalPaging: boolean;
    externalSorting: boolean;
    loadingIndicator: boolean;
    scrollbarH: boolean;
    scrollbarV: boolean;
    reorderable: boolean;
    sortType: SortType;
    messages: any;
    selectionType: SelectionType;
    columnMode: ColumnMode;
    headerHeight: any;
    footerHeight: any;
    rowHeight: number | 'auto' | ((row?: any) => number);
    header: boolean;
    column: boolean;
    footer: boolean;
    add: boolean;
    edit: boolean;
    delete: boolean;
    filter: boolean;
    api: HttpBaseModel;
    startWithOpenData: boolean;
    filterEvent: boolean;
    formGroupFilter: FormGroup;
    sort: Sort;
    sortsDefault: any[];
    autoLoad: boolean;
    onAdd: EventEmitter<boolean>;
    onEdit: EventEmitter<any>;
    onDelete: EventEmitter<any[]>;
    onSearch: EventEmitter<any>;
    onFilter: EventEmitter<any>;
    onButtonCell: EventEmitter<any>;
    onLoading: EventEmitter<boolean>;
    onSelected: EventEmitter<any>;
    set filterFn(keyword: Keyword);
    set filterDoFetchFn(keyword: Keyword);
    set reloadFn(reload: boolean);
    keywordParam: Keyword;
    _keyword: Keyword;
    isDelete: boolean;
    protected http: HttpFactoryService;
    private destroy$;
    private cdref;
    private pageOffset;
    protected _search: string;
    constructor(locale: string, injector: Injector);
    ngOnInit(): void;
    ngOnDestroy(): void;
    doSearch(search: string): void;
    doFilter(search: any): void;
    doAdd(add: boolean): void;
    doEdit(row: any): void;
    doDelete(): void;
    onKeyDown(event: KeyboardEvent): void;
    fetch(): void;
    setPage(page: Page): void;
    onSort(order: any): void;
    onSelect({ selected }: {
        selected: any;
    }): void;
    onClickButton(event: any): void;
    private getRequest;
    static ɵfac: i0.ɵɵFactoryDeclaration<DoDatatableComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DoDatatableComponent, "do-datatable", never, { "rows": "rows"; "columns": "columns"; "filters": "filters"; "selected": "selected"; "limit": "limit"; "count": "count"; "offset": "offset"; "externalPaging": "externalPaging"; "externalSorting": "externalSorting"; "loadingIndicator": "loadingIndicator"; "scrollbarH": "scrollbarH"; "scrollbarV": "scrollbarV"; "reorderable": "reorderable"; "sortType": "sortType"; "messages": "messages"; "selectionType": "selectionType"; "columnMode": "columnMode"; "headerHeight": "headerHeight"; "footerHeight": "footerHeight"; "rowHeight": "rowHeight"; "header": "header"; "column": "column"; "footer": "footer"; "add": "add"; "edit": "edit"; "delete": "delete"; "filter": "filter"; "api": "api"; "startWithOpenData": "startWithOpenData"; "filterEvent": "filterEvent"; "formGroupFilter": "formGroupFilter"; "sort": "sort"; "sortsDefault": "sortsDefault"; "autoLoad": "autoLoad"; "filterFn": "filterFn"; "filterDoFetchFn": "filterDoFetchFn"; "reloadFn": "reloadFn"; }, { "onAdd": "onAdd"; "onEdit": "onEdit"; "onDelete": "onDelete"; "onSearch": "onSearch"; "onFilter": "onFilter"; "onButtonCell": "onButtonCell"; "onLoading": "onLoading"; "onSelected": "onSelected"; }, never, ["*"]>;
}
