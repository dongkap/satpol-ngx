import { Injector, EventEmitter } from '@angular/core';
import { OnDestroy } from '@angular/core';
import { NgControl } from '@angular/forms';
import { Subject } from 'rxjs';
import { HttpFactoryService, HttpBaseModel } from '@dongkap/do-core';
import { SelectParamModel, SelectResponseModel } from './models/select.model';
import { ValueAccessorDirective } from '../base/value-accessor.component';
import * as i0 from "@angular/core";
export declare class DoSelectComponent extends ValueAccessorDirective<any> implements OnDestroy {
    locale: string;
    injector: Injector;
    placeholder: string;
    colLabel: number;
    colInput: number;
    items: SelectResponseModel[];
    multiple: boolean;
    loading: boolean;
    addTag: boolean;
    closeOnSelect: boolean;
    clearable: boolean;
    searchable: boolean;
    hideSelected: boolean;
    minTermLength: number;
    maxTermLength: number;
    api: HttpBaseModel;
    limit: number;
    offsetNextLoad: number;
    queryParam: SelectParamModel[];
    onSelect: EventEmitter<any>;
    onClear: EventEmitter<boolean>;
    contentTemplate: any;
    notFoundText: string;
    typeToSearchText: string;
    virtualScroll: boolean;
    paramSearch: any;
    typeahead$: Subject<string>;
    protected http: HttpFactoryService;
    private destroy$;
    private total;
    private totalRecord;
    private cdref;
    _value: any;
    constructor(ngControl: NgControl, locale: string, injector: Injector);
    get value(): any;
    set value(value: any);
    onInit(): void;
    ngOnDestroy(): void;
    onOpen(): void;
    onClose(): void;
    onScroll({ end }: {
        end: any;
    }, search: string): void;
    onScrollToEnd(search: string): void;
    doClear(): void;
    private reset;
    private fetchMore;
    private fetchSearch;
    private fetchNone;
    private getRequest;
    onKeyDown(event: KeyboardEvent, term: string): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<DoSelectComponent, [{ optional: true; self: true; }, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DoSelectComponent, "do-select", never, { "placeholder": "placeholder"; "colLabel": "colLabel"; "colInput": "colInput"; "items": "items"; "multiple": "multiple"; "loading": "loading"; "addTag": "addTag"; "closeOnSelect": "closeOnSelect"; "clearable": "clearable"; "searchable": "searchable"; "hideSelected": "hideSelected"; "minTermLength": "minTermLength"; "maxTermLength": "maxTermLength"; "api": "api"; "limit": "limit"; "offsetNextLoad": "offsetNextLoad"; "queryParam": "queryParam"; }, { "onSelect": "onSelect"; "onClear": "onClear"; }, ["contentTemplate"], never>;
}
