import { Component } from '@angular/core';
import { FormControl } from '@angular/forms';
import { takeUntil } from 'rxjs/operators';
import { ResponseCode, LocaleModel } from '@dongkap/do-core';
import { BaseFormComponent } from '@dongkap/do-shared';
import { ParameterModel, ParameterGroupModel } from '../../models/parameter.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../../services/parameter.service";
import * as i3 from "@dongkap/do-shared";
import * as i4 from "@angular/forms";
import * as i5 from "@angular/common";
import * as i6 from "@ngx-translate/core";
export class ParameterAddEditDetailPageComponent extends BaseFormComponent {
    constructor(injector, router, parameterService, route) {
        super(injector, {
            parameterCode: [],
            'en-US': [],
            'id-ID': [],
        });
        this.injector = injector;
        this.router = router;
        this.parameterService = parameterService;
        this.route = route;
        this.action = 'Add';
        this.parameter = new ParameterModel();
        this.parameterGroup = new ParameterGroupModel();
        this.allLocales = [];
        this.locales = [];
        this.localeDefault = new LocaleModel();
        this.isEdit = false;
        if (this.parameterService.getParameterGroup()) {
            this.parameterGroup = this.parameterService.getParameterGroup();
            if ((this.route.snapshot.params['action'] === 'edit')) {
                if (this.parameterService.getParameter()) {
                    this.action = 'Edit';
                    this.isEdit = true;
                    this.parameter = this.parameterService.getParameter();
                }
                else {
                    this.router.navigate(['/app/sysconf/parameter']);
                }
            }
            if (!this.parameterService.getLocales()) {
                this.apiPathLocale = this.api['master']['all-locale'];
                this.http.HTTP_AUTH(this.apiPathLocale).subscribe(response => {
                    this.parameterService.setLocales(response);
                    this.splitLocale(response);
                });
            }
            else {
                this.splitLocale(this.parameterService.getLocales());
            }
            if (this.isEdit) {
                this.formGroup.get('parameterCode').setValue(this.parameter.parameterCode);
                this.formGroup.get('parameterCode').disable({ emitEvent: true });
                this.apiPathParameterI18n = this.api['master']['all-parameter-i18n'];
                this.loadingForm = true;
                this.http.HTTP_AUTH(this.apiPathParameterI18n, {
                    parameterCode: this.parameter.parameterCode,
                }).subscribe((response) => {
                    response.forEach(data => {
                        this.formGroup.get(data.locale).setValue(data.parameterValue);
                        this.loadingForm = false;
                    });
                });
            }
        }
        else {
            this.router.navigate(['/app/sysconf/parameter']);
        }
    }
    splitLocale(values) {
        this.allLocales = values;
        values.forEach(data => {
            if (data.localeDefault) {
                this.localeDefault = data;
            }
            else {
                this.locales.push(data);
            }
            this.formGroup.removeControl(data.localeCode);
            this.formGroup.addControl(data.localeCode, new FormControl());
        });
    }
    ngOnInit() { }
    onReset() {
        this.router.navigate(['/app/sysconf/parameter/detail']);
    }
    onSubmit() {
        const data = this.formGroup.value;
        if (this.isEdit) {
            data.parameterCode = this.parameter.parameterCode;
        }
        data.parameterGroupCode = this.parameterGroup.parameterGroupCode;
        data.parameterValues = {};
        this.allLocales.forEach(value => {
            data.parameterValues[value.localeCode] = this.formGroup.get(value.localeCode).value;
        });
        super.onSubmit(data, 'master', 'post-parameter-i18n')
            .pipe(takeUntil(this.destroy$))
            .subscribe(response => {
            if (response.respStatusCode === ResponseCode.OK_SCR009.toString()) {
                this.router.navigate(['/app/sysconf/parameter/detail']);
            }
        });
    }
}
ParameterAddEditDetailPageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ParameterAddEditDetailPageComponent, deps: [{ token: i0.Injector }, { token: i1.Router }, { token: i2.ParameterService }, { token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
ParameterAddEditDetailPageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ParameterAddEditDetailPageComponent, selector: "do-parameter-add-edit-detail-page", usesInheritance: true, ngImport: i0, template: "<do-page-outlet [header]=\"action + ' Parameter'\" [url]=\"'/app/sysconf/parameter/detail'\">\n  <div class=\"row\" pagecontent>\n    <div class=\"col-md-12 col-lg-12\">\n      <form [formGroup]=\"formGroup\">\n        <do-input-text\n          [name]=\"'parameterCode'\"\n          [label]=\"'Parameter Code'\"\n          [required]=\"!isEdit\"\n          [skeleton]=\"loadingForm\"\n          formControlName=\"parameterCode\">\n        </do-input-text>\n        <div class=\"form-group row\">\n          <label\n            for=\"Parameter Value\"\n            class=\"label col-sm-3 col-form-label\"\n            *ngIf=\"!loadingForm; else labelskeleton\">\n            {{'Parameter Value' | translate}}\n          </label>\n          <ng-template #labelskeleton>\n            <div class=\"col-sm-3\">\n              <div\n                [ngClass]=\"{\n                  'label-skeleton': true,\n                  'skeleton': loadingForm\n                }\">\n              </div>\n            </div>\n          </ng-template>\n          <div class=\"col-sm-9\">\n            <do-input-icon *ngIf=\"localeDefault.localeCode\"\n              [name]=\"localeDefault.localeCode\"\n              [nolabel]=\"true\"\n              [required]=\"true\"\n              [colLabel]=\"0\"\n              [colInput]=\"12\"\n              [icon]=\"'flag-icon flag-icon-' + localeDefault.icon\"\n              [skeleton]=\"loadingForm\"\n              formControlName=\"{{localeDefault.localeCode}}\">\n            </do-input-icon>\n          </div>\n        </div>\n        <do-input-icon *ngFor=\"let i18n of locales\"\n          [name]=\"i18n.localeCode\"\n          [nolabel]=\"true\"\n          [icon]=\"'flag-icon flag-icon-'+ i18n.icon\"\n          [skeleton]=\"loadingForm\"\n          formControlName=\"{{i18n.localeCode}}\">\n        </do-input-icon>\n      </form>\n    </div>\n  </div>\n  <do-button-submit\n    [submitTitle]=\"action\"\n    [resetTitle]=\"'Cancel'\"\n    [formGroupButton]=\"formGroup\"\n    [disabledButton]=\"disabled\"\n    (onReset)=\"onReset()\"\n    (onSubmit)=\"onSubmit()\"\n    pagefooter>\n  </do-button-submit>\n</do-page-outlet>\n", styles: [".reset-left{margin-right:.25rem}.submit-right{margin-left:.25rem}\n"], components: [{ type: i3.DoPageOutletComponent, selector: "do-page-outlet", inputs: ["header", "url", "width", "dataSelect", "selected", "param", "hidefooter", "showToggle", "isCollapsed", "iconToggle"], outputs: ["selectChange", "onCollapsed", "onExpanded"] }, { type: i3.DoInputTextComponent, selector: "do-input-text", inputs: ["placeholder", "colLabel", "colInput", "minLength", "maxLength", "min", "max", "step", "capslock", "type"] }, { type: i3.DoInputIconComponent, selector: "do-input-icon", inputs: ["placeholder", "colLabel", "colInput", "minLength", "maxLength", "buttontype", "type", "iconcursor", "eva", "icon"], outputs: ["clickIcon", "focus"] }, { type: i3.DoButtonSubmitComponent, selector: "do-button-submit", inputs: ["colLabel", "colButton", "resetTitle", "submitTitle", "disabledButton", "disabledReset", "type", "status", "skeleton", "formGroupButton"], outputs: ["onSubmit", "onReset"] }], directives: [{ type: i4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i4.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i6.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ParameterAddEditDetailPageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'do-parameter-add-edit-detail-page',
                    styleUrls: ['./parameter-add-edit-detail-page.component.scss'],
                    templateUrl: './parameter-add-edit-detail-page.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.Router }, { type: i2.ParameterService }, { type: i1.ActivatedRoute }]; } });
//# sourceMappingURL=data:application/json;base64,