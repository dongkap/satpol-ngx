import { Component } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { ResponseCode } from '@dongkap/do-core';
import { BaseFormComponent } from '@dongkap/do-shared';
import { DialogFlagComponent } from './dialog-flag/dialog-flag.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../services/locale.service";
import * as i3 from "@nebular/theme";
import * as i4 from "@dongkap/do-shared";
import * as i5 from "@angular/forms";
export class LocaleAddEditPageComponent extends BaseFormComponent {
    constructor(injector, router, route, localeService, dialogService) {
        super(injector, {
            language: [],
            icon: [],
            default: [],
        });
        this.injector = injector;
        this.router = router;
        this.route = route;
        this.localeService = localeService;
        this.dialogService = dialogService;
        this.action = 'Add';
        this.dataDefault = [
            {
                id: 'default',
                selected: false,
            },
        ];
        if (this.localeService.getLocale() || (this.route.snapshot.params['action'] === 'add')) {
            if ((this.route.snapshot.params['action'] === 'edit')) {
                this.action = 'Edit';
            }
            this.apiSelectLanguage = this.api['master']['select-language'];
            if (this.localeService.getLocale() && (this.route.snapshot.params['action'] === 'edit')) {
                if (this.localeService.getLocale().localeDefault) {
                    this.formGroup.get('default').setValue([{
                            id: 'default',
                            selected: true,
                        }]);
                    this.formGroup.get('default').disable();
                }
                else {
                    this.formGroup.get('default').setValue([{
                            id: 'default',
                            selected: false,
                        }]);
                }
                this.formGroup.get('icon').setValue(this.localeService.getLocale().icon);
                this.formGroup.get('language').setValue(this.localeService.getLocale().identifier);
                this.formGroup.get('language').disable();
            }
        }
        else {
            this.router.navigate(['/app/sysconf/i18n']);
        }
    }
    ngOnInit() { }
    onSearchFlag() {
        this.dialogService.open(DialogFlagComponent)
            .onClose.subscribe((flagIcon) => {
            this.formGroup.get('icon').setValue(flagIcon);
            this.formGroup.get('icon').markAsDirty();
        });
    }
    onReset() {
        this.router.navigate(['/app/sysconf/i18n']);
    }
    onSubmit() {
        const localeDefault = this.formGroup.get('default').value;
        const data = {
            icon: this.formGroup.get('icon').value,
            localeDefault: (localeDefault ? true : false),
            localeCode: this.formGroup.get('language').value['value'] ?
                this.formGroup.get('language').value['value'] : this.localeService.getLocale().localeCode,
            identifier: this.formGroup.get('language').value['label'] ?
                this.formGroup.get('language').value['label'] : this.localeService.getLocale().identifier,
            localeEnabled: true,
        };
        super.onSubmit(data, 'master', 'post-locale')
            .pipe(takeUntil(this.destroy$))
            .subscribe(response => {
            if (response.respStatusCode === ResponseCode.OK_SCR010.toString()) {
                this.router.navigate(['/app/sysconf/i18n']);
            }
        });
    }
}
LocaleAddEditPageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LocaleAddEditPageComponent, deps: [{ token: i0.Injector }, { token: i1.Router }, { token: i1.ActivatedRoute }, { token: i2.LocaleService }, { token: i3.NbDialogService }], target: i0.ɵɵFactoryTarget.Component });
LocaleAddEditPageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LocaleAddEditPageComponent, selector: "do-locale-add-edit-page", usesInheritance: true, ngImport: i0, template: "<do-page-outlet [header]=\"'header.'+action+'-i18n'\" [url]=\"'/app/sysconf/i18n'\">\n  <div class=\"row\" pagecontent>\n    <div class=\"col-md-12 col-lg-12\">\n      <form [formGroup]=\"formGroup\">\n        <do-select\n          [name]=\"'language'\"\n          [label]=\"'Language'\"\n          [required]=\"true\"\n          [api]=\"apiSelectLanguage\"\n          formControlName=\"language\">\n        </do-select>\n        <do-input-icon\n          [name]=\"'icon'\"\n          [label]=\"'Icon'\"\n          [required]=\"true\"\n          [icon]=\"'search-outline'\"\n          [iconcursor]=\"true\"\n          [eva]=\"true\"\n          (clickIcon)=\"onSearchFlag()\"\n          formControlName=\"icon\">\n        </do-input-icon>\n        <do-checkbox\n          [name]=\"'checkbox'\"\n          [label]=\"'System Default Language'\"\n          [data]=\"dataDefault\"\n          formControlName=\"default\">\n        </do-checkbox>\n      </form>\n    </div>\n  </div>\n  <do-button-submit\n    [submitTitle]=\"action\"\n    [resetTitle]=\"'Cancel'\"\n    [formGroupButton]=\"formGroup\"\n    [disabledButton]=\"disabled\"\n    (onReset)=\"onReset()\"\n    (onSubmit)=\"onSubmit()\"\n    pagefooter>\n  </do-button-submit>\n</do-page-outlet>\n", styles: [".reset-left{margin-right:.25rem}.submit-right{margin-left:.25rem}\n"], components: [{ type: i4.DoPageOutletComponent, selector: "do-page-outlet", inputs: ["header", "url", "width", "dataSelect", "selected", "param", "hidefooter", "showToggle", "isCollapsed", "iconToggle"], outputs: ["selectChange", "onCollapsed", "onExpanded"] }, { type: i4.DoSelectComponent, selector: "do-select", inputs: ["placeholder", "colLabel", "colInput", "items", "multiple", "loading", "addTag", "closeOnSelect", "clearable", "searchable", "hideSelected", "minTermLength", "maxTermLength", "api", "limit", "offsetNextLoad", "queryParam"], outputs: ["onSelect", "onClear"] }, { type: i4.DoInputIconComponent, selector: "do-input-icon", inputs: ["placeholder", "colLabel", "colInput", "minLength", "maxLength", "buttontype", "type", "iconcursor", "eva", "icon"], outputs: ["clickIcon", "focus"] }, { type: i4.DoCheckboxComponent, selector: "do-checkbox", inputs: ["colLabel", "colInput", "data"], outputs: ["onChecked"] }, { type: i4.DoButtonSubmitComponent, selector: "do-button-submit", inputs: ["colLabel", "colButton", "resetTitle", "submitTitle", "disabledButton", "disabledReset", "type", "status", "skeleton", "formGroupButton"], outputs: ["onSubmit", "onReset"] }], directives: [{ type: i5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LocaleAddEditPageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'do-locale-add-edit-page',
                    styleUrls: ['./locale-add-edit-page.component.scss'],
                    templateUrl: './locale-add-edit-page.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.Router }, { type: i1.ActivatedRoute }, { type: i2.LocaleService }, { type: i3.NbDialogService }]; } });
//# sourceMappingURL=data:application/json;base64,