import { Component } from '@angular/core';
import { BaseFilterComponent } from '@dongkap/do-shared';
import { SelectionType } from '@swimlane/ngx-datatable';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../services/employee.service";
import * as i3 from "@dongkap/do-shared";
import * as i4 from "@angular/forms";
export class EmployeeListPageComponent extends BaseFilterComponent {
    constructor(injector, router, employeeService) {
        super(injector, {
            idEmployee: [],
            fullname: [],
            occupationName: [],
        });
        this.injector = injector;
        this.router = router;
        this.employeeService = employeeService;
        this.columns = [
            { name: 'NIK', prop: 'idEmployee', width: 50, frozenLeft: true, sortable: true },
            { name: 'Name', prop: 'user.fullname', width: 155, frozenLeft: true, sortable: true },
            { name: 'Occupation', prop: 'occupationName', width: 155, frozenLeft: true },
            { name: 'Phone Number', prop: 'phoneNumber' },
            { name: 'Email', prop: 'user.email' },
            { name: 'Address', prop: 'address' },
        ];
        this.reload = false;
        this.expanded = false;
        this.selectionType = SelectionType.single;
        this.apiPath = this.api['security']['datatable-employee'];
        this.sort = {
            asc: ['user.fullname']
        };
        this.sortsDefault = [
            { prop: 'user.fullname', dir: 'asc' }
        ];
        this.filters = [
            { controlName: 'idEmployee', type: 'input' },
            { controlName: 'fullname', type: 'input' },
            { controlName: 'occupationName', type: 'input' }
        ];
    }
    ngOnInit() {
    }
    onAdd() {
        this.employeeService.setEmployeeHeader(null);
        this.router.navigate(['/app/mgmt/employee', 'add']);
    }
    onViewDetail(data) {
        this.employeeService.setEmployeeHeader(data);
        this.router.navigate(['/app/mgmt/employee', 'edit']);
    }
    onReset() {
        this.router.navigate(['/app/mgmt/employee']);
    }
}
EmployeeListPageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EmployeeListPageComponent, deps: [{ token: i0.Injector }, { token: i1.Router }, { token: i2.EmployeeService }], target: i0.ɵɵFactoryTarget.Component });
EmployeeListPageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EmployeeListPageComponent, selector: "do-employee-list-page", usesInheritance: true, ngImport: i0, template: "<do-page-outlet [header]=\"'header.employee-management'\" [hidefooter]=\"true\">\n  <div class=\"row\" pagecontent>\n    <div class=\"col-md-12 col-lg-12\">\n      <do-datatable\n        [api]=\"apiPath\"\n        [formGroupFilter]=\"formGroupFilter\"\n        [filters]=\"filters\"\n        [sort]=\"sort\"\n        [sortsDefault]=\"sortsDefault\"\n        [reloadFn]=\"reload\"\n        [selectionType]=\"selectionType\"\n        [delete]=\"false\"\n        (onAdd)=\"onAdd()\"\n        (onEdit)=\"onViewDetail($event)\"\n        [columns]=\"columns\">\n        <form [formGroup]=\"formGroupFilter\">\n          <do-input-text\n            [name]=\"'fullname'\"\n            [label]=\"'Name'\"\n            formControlName=\"fullname\">\n          </do-input-text>\n          <do-input-text\n            [name]=\"'idEmployee'\"\n            [label]=\"'NIK'\"\n            formControlName=\"idEmployee\">\n          </do-input-text>\n          <do-input-text\n            [name]=\"'occupationName'\"\n            [label]=\"'Occupation Name'\"\n            formControlName=\"occupationName\">\n          </do-input-text>\n        </form>\n      </do-datatable>\n    </div>\n  </div>\n</do-page-outlet>\n\n", styles: [""], components: [{ type: i3.DoPageOutletComponent, selector: "do-page-outlet", inputs: ["header", "url", "width", "dataSelect", "selected", "param", "hidefooter", "showToggle", "isCollapsed", "iconToggle"], outputs: ["selectChange", "onCollapsed", "onExpanded"] }, { type: i3.DoDatatableComponent, selector: "do-datatable", inputs: ["rows", "columns", "filters", "selected", "limit", "count", "offset", "externalPaging", "externalSorting", "loadingIndicator", "scrollbarH", "scrollbarV", "reorderable", "sortType", "messages", "selectionType", "columnMode", "headerHeight", "footerHeight", "rowHeight", "header", "column", "footer", "add", "edit", "delete", "filter", "api", "startWithOpenData", "filterEvent", "formGroupFilter", "sort", "sortsDefault", "autoLoad", "filterFn", "filterDoFetchFn", "reloadFn"], outputs: ["onAdd", "onEdit", "onDelete", "onSearch", "onFilter", "onButtonCell", "onLoading", "onSelected"] }, { type: i3.DoInputTextComponent, selector: "do-input-text", inputs: ["placeholder", "colLabel", "colInput", "minLength", "maxLength", "min", "max", "step", "capslock", "type"] }], directives: [{ type: i4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EmployeeListPageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'do-employee-list-page',
                    styleUrls: ['./employee-list-page.component.scss'],
                    templateUrl: './employee-list-page.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.Router }, { type: i2.EmployeeService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1wbG95ZWUtbGlzdC1wYWdlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL0Bkb25na2FwL2RvLXN5cy9zcmMvbGliL2VtcGxveWVlL2xpc3QvZW1wbG95ZWUtbGlzdC1wYWdlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL0Bkb25na2FwL2RvLXN5cy9zcmMvbGliL2VtcGxveWVlL2xpc3QvZW1wbG95ZWUtbGlzdC1wYWdlLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVksTUFBTSxlQUFlLENBQUM7QUFJcEQsT0FBTyxFQUFFLG1CQUFtQixFQUFtQixNQUFNLG9CQUFvQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7Ozs7O0FBUXhELE1BQU0sT0FBTyx5QkFBMEIsU0FBUSxtQkFBd0I7SUFlckUsWUFDUyxRQUFrQixFQUNqQixNQUFjLEVBQ2QsZUFBZ0M7UUFDeEMsS0FBSyxDQUFDLFFBQVEsRUFBRTtZQUNkLFVBQVUsRUFBRSxFQUFFO1lBQ2QsUUFBUSxFQUFFLEVBQUU7WUFDWixjQUFjLEVBQUUsRUFBRTtTQUNuQixDQUFDLENBQUM7UUFQSSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2pCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFmbkMsWUFBTyxHQUFzQjtZQUNsQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRTtZQUNoRixFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLGVBQWUsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRTtZQUNyRixFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRTtZQUM1RSxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRTtZQUM3QyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBQztZQUNwQyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRTtTQUNyQyxDQUFDO1FBQ0ssV0FBTSxHQUFZLEtBQUssQ0FBQztRQUN4QixhQUFRLEdBQVksS0FBSyxDQUFDO1FBQzFCLGtCQUFhLEdBQWtCLGFBQWEsQ0FBQyxNQUFNLENBQUM7UUFXekQsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDMUQsSUFBSSxDQUFDLElBQUksR0FBRztZQUNWLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQztTQUN2QixDQUFDO1FBQ0YsSUFBSSxDQUFDLFlBQVksR0FBRztZQUNsQixFQUFFLElBQUksRUFBRSxlQUFlLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRTtTQUN0QyxDQUFDO1FBQ0YsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNiLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFO1lBQzVDLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFO1lBQzFDLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxPQUFPLEVBQUU7U0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxRQUFRO0lBQ1IsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQsWUFBWSxDQUFDLElBQUk7UUFDZixJQUFJLENBQUMsZUFBZSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsb0JBQW9CLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsT0FBTztRQUNMLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7O3VIQXBEVSx5QkFBeUI7MkdBQXpCLHlCQUF5QixvRkNidEMsdXJDQXFDQTs0RkR4QmEseUJBQXlCO2tCQUxyQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLFNBQVMsRUFBRSxDQUFDLHFDQUFxQyxDQUFDO29CQUNsRCxXQUFXLEVBQUUscUNBQXFDO2lCQUNuRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEh0dHBCYXNlTW9kZWwgfSBmcm9tICdAZG9uZ2thcC9kby1jb3JlJztcbmltcG9ydCB7IEJhc2VGaWx0ZXJDb21wb25lbnQsIERhdGF0YWJsZUNvbHVtbiB9IGZyb20gJ0Bkb25na2FwL2RvLXNoYXJlZCc7XG5pbXBvcnQgeyBTZWxlY3Rpb25UeXBlIH0gZnJvbSAnQHN3aW1sYW5lL25neC1kYXRhdGFibGUnO1xuaW1wb3J0IHsgRW1wbG95ZWVTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZW1wbG95ZWUuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2RvLWVtcGxveWVlLWxpc3QtcGFnZScsXG4gIHN0eWxlVXJsczogWycuL2VtcGxveWVlLWxpc3QtcGFnZS5jb21wb25lbnQuc2NzcyddLFxuICB0ZW1wbGF0ZVVybDogJy4vZW1wbG95ZWUtbGlzdC1wYWdlLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgRW1wbG95ZWVMaXN0UGFnZUNvbXBvbmVudCBleHRlbmRzIEJhc2VGaWx0ZXJDb21wb25lbnQ8YW55PiBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgcHVibGljIGFwaVBhdGg6IEh0dHBCYXNlTW9kZWw7XG4gIHB1YmxpYyBjb2x1bW5zOiBEYXRhdGFibGVDb2x1bW5bXSA9IFtcbiAgICB7IG5hbWU6ICdOSUsnLCBwcm9wOiAnaWRFbXBsb3llZScsIHdpZHRoOiA1MCwgZnJvemVuTGVmdDogdHJ1ZSwgc29ydGFibGU6IHRydWUgfSxcbiAgICB7IG5hbWU6ICdOYW1lJywgcHJvcDogJ3VzZXIuZnVsbG5hbWUnLCB3aWR0aDogMTU1LCBmcm96ZW5MZWZ0OiB0cnVlLCBzb3J0YWJsZTogdHJ1ZSB9LFxuICAgIHsgbmFtZTogJ09jY3VwYXRpb24nLCBwcm9wOiAnb2NjdXBhdGlvbk5hbWUnLCB3aWR0aDogMTU1LCBmcm96ZW5MZWZ0OiB0cnVlIH0sXG4gICAgeyBuYW1lOiAnUGhvbmUgTnVtYmVyJywgcHJvcDogJ3Bob25lTnVtYmVyJyB9LFxuICAgIHsgbmFtZTogJ0VtYWlsJywgcHJvcDogJ3VzZXIuZW1haWwnfSxcbiAgICB7IG5hbWU6ICdBZGRyZXNzJywgcHJvcDogJ2FkZHJlc3MnIH0sXG4gIF07XG4gIHB1YmxpYyByZWxvYWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHVibGljIGV4cGFuZGVkOiBib29sZWFuID0gZmFsc2U7XG4gIHB1YmxpYyBzZWxlY3Rpb25UeXBlOiBTZWxlY3Rpb25UeXBlID0gU2VsZWN0aW9uVHlwZS5zaW5nbGU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGluamVjdG9yOiBJbmplY3RvcixcbiAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyLFxuICAgIHByaXZhdGUgZW1wbG95ZWVTZXJ2aWNlOiBFbXBsb3llZVNlcnZpY2UpIHtcbiAgICBzdXBlcihpbmplY3Rvciwge1xuICAgICAgaWRFbXBsb3llZTogW10sXG4gICAgICBmdWxsbmFtZTogW10sXG4gICAgICBvY2N1cGF0aW9uTmFtZTogW10sXG4gICAgfSk7XG4gICAgdGhpcy5hcGlQYXRoID0gdGhpcy5hcGlbJ3NlY3VyaXR5J11bJ2RhdGF0YWJsZS1lbXBsb3llZSddO1xuICAgIHRoaXMuc29ydCA9IHtcbiAgICAgIGFzYzogWyd1c2VyLmZ1bGxuYW1lJ11cbiAgICB9O1xuICAgIHRoaXMuc29ydHNEZWZhdWx0ID0gW1xuICAgICAgeyBwcm9wOiAndXNlci5mdWxsbmFtZScsIGRpcjogJ2FzYycgfVxuICAgIF07XG4gICAgdGhpcy5maWx0ZXJzID0gW1xuICAgICAgeyBjb250cm9sTmFtZTogJ2lkRW1wbG95ZWUnLCB0eXBlOiAnaW5wdXQnIH0sXG4gICAgICB7IGNvbnRyb2xOYW1lOiAnZnVsbG5hbWUnLCB0eXBlOiAnaW5wdXQnIH0sXG4gICAgICB7IGNvbnRyb2xOYW1lOiAnb2NjdXBhdGlvbk5hbWUnLCB0eXBlOiAnaW5wdXQnIH1dO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gIH1cblxuICBvbkFkZCgpOiB2b2lkIHtcbiAgICB0aGlzLmVtcGxveWVlU2VydmljZS5zZXRFbXBsb3llZUhlYWRlcihudWxsKTtcbiAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJy9hcHAvbWdtdC9lbXBsb3llZScsICdhZGQnXSk7XG4gIH1cblxuICBvblZpZXdEZXRhaWwoZGF0YSk6IHZvaWQge1xuICAgIHRoaXMuZW1wbG95ZWVTZXJ2aWNlLnNldEVtcGxveWVlSGVhZGVyKGRhdGEpO1xuICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnL2FwcC9tZ210L2VtcGxveWVlJywgJ2VkaXQnXSk7XG4gIH1cblxuICBvblJlc2V0KCk6IHZvaWQge1xuICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnL2FwcC9tZ210L2VtcGxveWVlJ10pO1xuICB9XG5cbn1cbiIsIjxkby1wYWdlLW91dGxldCBbaGVhZGVyXT1cIidoZWFkZXIuZW1wbG95ZWUtbWFuYWdlbWVudCdcIiBbaGlkZWZvb3Rlcl09XCJ0cnVlXCI+XG4gIDxkaXYgY2xhc3M9XCJyb3dcIiBwYWdlY29udGVudD5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLW1kLTEyIGNvbC1sZy0xMlwiPlxuICAgICAgPGRvLWRhdGF0YWJsZVxuICAgICAgICBbYXBpXT1cImFwaVBhdGhcIlxuICAgICAgICBbZm9ybUdyb3VwRmlsdGVyXT1cImZvcm1Hcm91cEZpbHRlclwiXG4gICAgICAgIFtmaWx0ZXJzXT1cImZpbHRlcnNcIlxuICAgICAgICBbc29ydF09XCJzb3J0XCJcbiAgICAgICAgW3NvcnRzRGVmYXVsdF09XCJzb3J0c0RlZmF1bHRcIlxuICAgICAgICBbcmVsb2FkRm5dPVwicmVsb2FkXCJcbiAgICAgICAgW3NlbGVjdGlvblR5cGVdPVwic2VsZWN0aW9uVHlwZVwiXG4gICAgICAgIFtkZWxldGVdPVwiZmFsc2VcIlxuICAgICAgICAob25BZGQpPVwib25BZGQoKVwiXG4gICAgICAgIChvbkVkaXQpPVwib25WaWV3RGV0YWlsKCRldmVudClcIlxuICAgICAgICBbY29sdW1uc109XCJjb2x1bW5zXCI+XG4gICAgICAgIDxmb3JtIFtmb3JtR3JvdXBdPVwiZm9ybUdyb3VwRmlsdGVyXCI+XG4gICAgICAgICAgPGRvLWlucHV0LXRleHRcbiAgICAgICAgICAgIFtuYW1lXT1cIidmdWxsbmFtZSdcIlxuICAgICAgICAgICAgW2xhYmVsXT1cIidOYW1lJ1wiXG4gICAgICAgICAgICBmb3JtQ29udHJvbE5hbWU9XCJmdWxsbmFtZVwiPlxuICAgICAgICAgIDwvZG8taW5wdXQtdGV4dD5cbiAgICAgICAgICA8ZG8taW5wdXQtdGV4dFxuICAgICAgICAgICAgW25hbWVdPVwiJ2lkRW1wbG95ZWUnXCJcbiAgICAgICAgICAgIFtsYWJlbF09XCInTklLJ1wiXG4gICAgICAgICAgICBmb3JtQ29udHJvbE5hbWU9XCJpZEVtcGxveWVlXCI+XG4gICAgICAgICAgPC9kby1pbnB1dC10ZXh0PlxuICAgICAgICAgIDxkby1pbnB1dC10ZXh0XG4gICAgICAgICAgICBbbmFtZV09XCInb2NjdXBhdGlvbk5hbWUnXCJcbiAgICAgICAgICAgIFtsYWJlbF09XCInT2NjdXBhdGlvbiBOYW1lJ1wiXG4gICAgICAgICAgICBmb3JtQ29udHJvbE5hbWU9XCJvY2N1cGF0aW9uTmFtZVwiPlxuICAgICAgICAgIDwvZG8taW5wdXQtdGV4dD5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9kby1kYXRhdGFibGU+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kby1wYWdlLW91dGxldD5cblxuIl19