import { Injectable } from '@angular/core';
import * as CryptoJS from 'crypto-js';
import * as i0 from "@angular/core";
export class EncryptionService {
    constructor() {
        this.ivSize = 128;
    }
    getHmacSha256(secret, message, hex) {
        const hash = CryptoJS.HmacSHA256(message, secret);
        if (hex) {
            return CryptoJS.enc.Hex.stringify(hash).toUpperCase();
        }
        return CryptoJS.enc.Base64.stringify(hash);
    }
    encryptAES(secretKey, message) {
        const iv = CryptoJS.lib.WordArray.random(this.ivSize / 8);
        const key = CryptoJS.enc.Utf8.parse(secretKey);
        const encrypted = CryptoJS.AES.encrypt(message, key, {
            iv,
            padding: CryptoJS.pad.Pkcs7,
            mode: CryptoJS.mode.CBC,
        });
        const encryptMessage = iv.toString() + encrypted.toString();
        return encryptMessage;
    }
    decryptAES(secretKey, encryptMessage) {
        if (encryptMessage) {
            const iv = CryptoJS.enc.Hex.parse(encryptMessage.substr(0, 32));
            const key = CryptoJS.enc.Utf8.parse(secretKey);
            const encrypted = encryptMessage.substring(32);
            const decrypted = CryptoJS.AES.decrypt(encrypted, key, {
                iv,
                padding: CryptoJS.pad.Pkcs7,
                mode: CryptoJS.mode.CBC,
            });
            try {
                return decrypted.toString(CryptoJS.enc.Utf8);
            }
            catch (error) {
                return null;
            }
        }
        return null;
    }
}
EncryptionService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EncryptionService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
EncryptionService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EncryptionService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EncryptionService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jcnlwdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vQGRvbmdrYXAvZG8tY29yZS9zcmMvbGliL3NlcnZpY2VzL3NlY3VyaXR5L2VuY3J5cHRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sS0FBSyxRQUFRLE1BQU0sV0FBVyxDQUFDOztBQUd0QyxNQUFNLE9BQU8saUJBQWlCO0lBRDlCO1FBR1ksV0FBTSxHQUFXLEdBQUcsQ0FBQztLQXlDaEM7SUF2Q1UsYUFBYSxDQUFDLE1BQWMsRUFBRSxPQUFlLEVBQUUsR0FBYTtRQUMvRCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNsRCxJQUFJLEdBQUcsRUFBRTtZQUNMLE9BQU8sUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3pEO1FBQ0QsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVNLFVBQVUsQ0FBQyxTQUFpQixFQUFFLE9BQWU7UUFDaEQsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDMUQsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDakQsRUFBRTtZQUNGLE9BQU8sRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUs7WUFDM0IsSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRztTQUMxQixDQUFDLENBQUM7UUFDSCxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLEdBQUcsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzVELE9BQU8sY0FBYyxDQUFDO0lBQzFCLENBQUM7SUFFTSxVQUFVLENBQUMsU0FBaUIsRUFBRSxjQUFzQjtRQUN2RCxJQUFJLGNBQWMsRUFBRTtZQUNoQixNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNoRSxNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDL0MsTUFBTSxTQUFTLEdBQUcsY0FBYyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUMvQyxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO2dCQUNyRCxFQUFFO2dCQUNGLE9BQU8sRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUs7Z0JBQzNCLElBQUksRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUc7YUFDeEIsQ0FBQyxDQUFDO1lBQ0gsSUFBSTtnQkFDQSxPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNoRDtZQUFDLE9BQU8sS0FBSyxFQUFFO2dCQUNaLE9BQU8sSUFBSSxDQUFDO2FBQ2Y7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7OytHQXpDUSxpQkFBaUI7bUhBQWpCLGlCQUFpQjs0RkFBakIsaUJBQWlCO2tCQUQ3QixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0ICogYXMgQ3J5cHRvSlMgZnJvbSAnY3J5cHRvLWpzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEVuY3J5cHRpb25TZXJ2aWNlIHtcblxuICAgIHByaXZhdGUgaXZTaXplOiBudW1iZXIgPSAxMjg7XG5cbiAgICBwdWJsaWMgZ2V0SG1hY1NoYTI1NihzZWNyZXQ6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nLCBoZXg/OiBib29sZWFuKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgaGFzaCA9IENyeXB0b0pTLkhtYWNTSEEyNTYobWVzc2FnZSwgc2VjcmV0KTtcbiAgICAgICAgaWYgKGhleCkge1xuICAgICAgICAgICAgcmV0dXJuIENyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KGhhc2gpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIENyeXB0b0pTLmVuYy5CYXNlNjQuc3RyaW5naWZ5KGhhc2gpO1xuICAgIH1cblxuICAgIHB1YmxpYyBlbmNyeXB0QUVTKHNlY3JldEtleTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBpdiA9IENyeXB0b0pTLmxpYi5Xb3JkQXJyYXkucmFuZG9tKHRoaXMuaXZTaXplIC8gOCk7XG4gICAgICAgIGNvbnN0IGtleSA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKHNlY3JldEtleSk7XG4gICAgICAgIGNvbnN0IGVuY3J5cHRlZCA9IENyeXB0b0pTLkFFUy5lbmNyeXB0KG1lc3NhZ2UsIGtleSwge1xuICAgICAgICAgICAgaXYsXG4gICAgICAgICAgICBwYWRkaW5nOiBDcnlwdG9KUy5wYWQuUGtjczcsXG4gICAgICAgICAgICBtb2RlOiBDcnlwdG9KUy5tb2RlLkNCQyxcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGVuY3J5cHRNZXNzYWdlID0gaXYudG9TdHJpbmcoKSArIGVuY3J5cHRlZC50b1N0cmluZygpO1xuICAgICAgICByZXR1cm4gZW5jcnlwdE1lc3NhZ2U7XG4gICAgfVxuXG4gICAgcHVibGljIGRlY3J5cHRBRVMoc2VjcmV0S2V5OiBzdHJpbmcsIGVuY3J5cHRNZXNzYWdlOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBpZiAoZW5jcnlwdE1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGNvbnN0IGl2ID0gQ3J5cHRvSlMuZW5jLkhleC5wYXJzZShlbmNyeXB0TWVzc2FnZS5zdWJzdHIoMCwgMzIpKTtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IENyeXB0b0pTLmVuYy5VdGY4LnBhcnNlKHNlY3JldEtleSk7XG4gICAgICAgICAgICBjb25zdCBlbmNyeXB0ZWQgPSBlbmNyeXB0TWVzc2FnZS5zdWJzdHJpbmcoMzIpO1xuICAgICAgICAgICAgY29uc3QgZGVjcnlwdGVkID0gQ3J5cHRvSlMuQUVTLmRlY3J5cHQoZW5jcnlwdGVkLCBrZXksIHtcbiAgICAgICAgICAgICAgaXYsXG4gICAgICAgICAgICAgIHBhZGRpbmc6IENyeXB0b0pTLnBhZC5Qa2NzNyxcbiAgICAgICAgICAgICAgbW9kZTogQ3J5cHRvSlMubW9kZS5DQkMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlY3J5cHRlZC50b1N0cmluZyhDcnlwdG9KUy5lbmMuVXRmOCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxufVxuIl19