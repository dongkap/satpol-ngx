import { Injectable } from '@angular/core';
import { HttpHeaders } from '@angular/common/http';
import { HttpAbstractService } from './http-abstract.service';
import { signatureHeader, HttpMethod } from '../../models';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class HttpCommonService extends HttpAbstractService {
    constructor(http) {
        super();
        this.http = http;
    }
    HTTP_AUTH(api, body, headers, params, pathVariable, responseType) {
        if (headers) {
            headers = headers.append(signatureHeader.mark, 'true');
        }
        else {
            headers = new HttpHeaders().append(signatureHeader.mark, 'true');
        }
        responseType = responseType ? responseType : 'json';
        return this.HTTP_BASE(api, body, headers, params, pathVariable, responseType);
    }
    HTTP_BASE(api, body, headers, params, pathVariable, responseType) {
        let response = null;
        responseType = responseType ? responseType : 'json';
        switch (api.method) {
            case HttpMethod.POST:
                response = this.POST(this.API(api, pathVariable), body, headers, params, responseType);
                break;
            case HttpMethod.PUT:
                response = this.PUT(this.API(api, pathVariable), body, headers, params);
                break;
            case HttpMethod.DELETE:
                response = this.DELETE(this.API(api, pathVariable), headers, params);
                break;
            default:
                response = this.GET(this.API(api, pathVariable), headers, params, responseType);
                break;
        }
        return response;
    }
    GET(url, headers, params, responseType) {
        return this.http.get(url, { headers, params, responseType });
    }
    POST(url, body, headers, params, responseType) {
        return this.http.post(url, body, { headers, params, responseType });
    }
    PUT(url, body, headers, params) {
        return this.http.put(url, body, { headers, params });
    }
    DELETE(url, headers, params) {
        return this.http.delete(url, { headers, params });
    }
}
HttpCommonService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HttpCommonService, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
HttpCommonService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HttpCommonService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HttpCommonService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1jb21tb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL0Bkb25na2FwL2RvLWNvcmUvc3JjL2xpYi9zZXJ2aWNlcy91dGlscy9odHRwLWNvbW1vbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBR25ELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzlELE9BQU8sRUFBaUIsZUFBZSxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7O0FBSzFFLE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxtQkFBbUI7SUFFeEQsWUFBc0IsSUFBZ0I7UUFDcEMsS0FBSyxFQUFFLENBQUM7UUFEWSxTQUFJLEdBQUosSUFBSSxDQUFZO0lBRXRDLENBQUM7SUFFTSxTQUFTLENBQ0UsR0FBa0IsRUFDbEIsSUFBVSxFQUNWLE9BQXFCLEVBQ3JCLE1BQW1CLEVBQ25CLFlBQXVCLEVBQ3ZCLFlBQXFDO1FBQ3JELElBQUksT0FBTyxFQUFFO1lBQ1gsT0FBTyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztTQUN4RDthQUFNO1lBQUUsT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FBRTtRQUM1RSxZQUFZLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNwRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxZQUFZLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBRU0sU0FBUyxDQUNFLEdBQWtCLEVBQ2xCLElBQVUsRUFDVixPQUFxQixFQUNyQixNQUFtQixFQUNuQixZQUF1QixFQUN2QixZQUFxQztRQUNyRCxJQUFJLFFBQVEsR0FBb0IsSUFBSSxDQUFDO1FBQ3JDLFlBQVksR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQ3BELFFBQVEsR0FBRyxDQUFDLE1BQU0sRUFBRTtZQUNsQixLQUFLLFVBQVUsQ0FBQyxJQUFJO2dCQUNsQixRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztnQkFDdkYsTUFBTTtZQUNSLEtBQUssVUFBVSxDQUFDLEdBQUc7Z0JBQ2pCLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQ3hFLE1BQU07WUFDUixLQUFLLFVBQVUsQ0FBQyxNQUFNO2dCQUNwQixRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQ3JFLE1BQU07WUFDUjtnQkFDRSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFDO2dCQUNoRixNQUFNO1NBQ1Q7UUFDRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBRU0sR0FBRyxDQUFDLEdBQVcsRUFBRSxPQUFxQixFQUFFLE1BQW1CLEVBQUUsWUFBa0I7UUFDcEYsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBQyxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVNLElBQUksQ0FBQyxHQUFXLEVBQUUsSUFBUyxFQUFFLE9BQXFCLEVBQUUsTUFBbUIsRUFBRSxZQUFrQjtRQUVoRyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBQyxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVNLEdBQUcsQ0FBQyxHQUFXLEVBQUUsSUFBUyxFQUFFLE9BQXFCLEVBQUUsTUFBbUI7UUFDM0UsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxHQUFXLEVBQUUsT0FBcUIsRUFBRSxNQUFtQjtRQUNuRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxFQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUMsQ0FBQyxDQUFDO0lBQ2xELENBQUM7OytHQTdEVSxpQkFBaUI7bUhBQWpCLGlCQUFpQixjQUZoQixNQUFNOzRGQUVQLGlCQUFpQjtrQkFIN0IsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgSHR0cEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBIdHRwUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSHR0cEFic3RyYWN0U2VydmljZSB9IGZyb20gJy4vaHR0cC1hYnN0cmFjdC5zZXJ2aWNlJztcbmltcG9ydCB7IEh0dHBCYXNlTW9kZWwsIHNpZ25hdHVyZUhlYWRlciwgSHR0cE1ldGhvZCB9IGZyb20gJy4uLy4uL21vZGVscyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBIdHRwQ29tbW9uU2VydmljZSBleHRlbmRzIEh0dHBBYnN0cmFjdFNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBodHRwOiBIdHRwQ2xpZW50KSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyBIVFRQX0FVVEgoXG4gICAgICAgICAgICAgICAgICAgIGFwaTogSHR0cEJhc2VNb2RlbCxcbiAgICAgICAgICAgICAgICAgICAgYm9keT86IGFueSxcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVycz86IEh0dHBIZWFkZXJzLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXM/OiBIdHRwUGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICBwYXRoVmFyaWFibGU/OiBzdHJpbmdbXSxcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlPzogJ2pzb24nIHwgJ2FycmF5YnVmZmVyJyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgaWYgKGhlYWRlcnMpIHtcbiAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLmFwcGVuZChzaWduYXR1cmVIZWFkZXIubWFyaywgJ3RydWUnKTtcbiAgICB9IGVsc2UgeyBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCkuYXBwZW5kKHNpZ25hdHVyZUhlYWRlci5tYXJrLCAndHJ1ZScpOyB9XG4gICAgcmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlID8gcmVzcG9uc2VUeXBlIDogJ2pzb24nO1xuICAgIHJldHVybiB0aGlzLkhUVFBfQkFTRShhcGksIGJvZHksIGhlYWRlcnMsIHBhcmFtcywgcGF0aFZhcmlhYmxlLCByZXNwb25zZVR5cGUpO1xuICB9XG5cbiAgcHVibGljIEhUVFBfQkFTRShcbiAgICAgICAgICAgICAgICAgICAgYXBpOiBIdHRwQmFzZU1vZGVsLFxuICAgICAgICAgICAgICAgICAgICBib2R5PzogYW55LFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJzPzogSHR0cEhlYWRlcnMsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcz86IEh0dHBQYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgIHBhdGhWYXJpYWJsZT86IHN0cmluZ1tdLFxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU/OiAnanNvbicgfCAnYXJyYXlidWZmZXInKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBsZXQgcmVzcG9uc2U6IE9ic2VydmFibGU8YW55PiA9IG51bGw7XG4gICAgcmVzcG9uc2VUeXBlID0gcmVzcG9uc2VUeXBlID8gcmVzcG9uc2VUeXBlIDogJ2pzb24nO1xuICAgIHN3aXRjaCAoYXBpLm1ldGhvZCkge1xuICAgICAgY2FzZSBIdHRwTWV0aG9kLlBPU1Q6XG4gICAgICAgIHJlc3BvbnNlID0gdGhpcy5QT1NUKHRoaXMuQVBJKGFwaSwgcGF0aFZhcmlhYmxlKSwgYm9keSwgaGVhZGVycywgcGFyYW1zLCByZXNwb25zZVR5cGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgSHR0cE1ldGhvZC5QVVQ6XG4gICAgICAgIHJlc3BvbnNlID0gdGhpcy5QVVQodGhpcy5BUEkoYXBpLCBwYXRoVmFyaWFibGUpLCBib2R5LCBoZWFkZXJzLCBwYXJhbXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgSHR0cE1ldGhvZC5ERUxFVEU6XG4gICAgICAgIHJlc3BvbnNlID0gdGhpcy5ERUxFVEUodGhpcy5BUEkoYXBpLCBwYXRoVmFyaWFibGUpLCBoZWFkZXJzLCBwYXJhbXMpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJlc3BvbnNlID0gdGhpcy5HRVQodGhpcy5BUEkoYXBpLCBwYXRoVmFyaWFibGUpLCBoZWFkZXJzLCBwYXJhbXMsIHJlc3BvbnNlVHlwZSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH1cblxuICBwdWJsaWMgR0VUKHVybDogc3RyaW5nLCBoZWFkZXJzPzogSHR0cEhlYWRlcnMsIHBhcmFtcz86IEh0dHBQYXJhbXMsIHJlc3BvbnNlVHlwZT86IGFueSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsLCB7aGVhZGVycywgcGFyYW1zLCByZXNwb25zZVR5cGV9KTtcbiAgfVxuXG4gIHB1YmxpYyBQT1NUKHVybDogc3RyaW5nLCBib2R5OiBhbnksIGhlYWRlcnM/OiBIdHRwSGVhZGVycywgcGFyYW1zPzogSHR0cFBhcmFtcywgcmVzcG9uc2VUeXBlPzogYW55KTpcbiAgICBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh1cmwsIGJvZHksIHtoZWFkZXJzLCBwYXJhbXMsIHJlc3BvbnNlVHlwZX0pO1xuICB9XG5cbiAgcHVibGljIFBVVCh1cmw6IHN0cmluZywgYm9keTogYW55LCBoZWFkZXJzPzogSHR0cEhlYWRlcnMsIHBhcmFtcz86IEh0dHBQYXJhbXMpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHAucHV0KHVybCwgYm9keSwge2hlYWRlcnMsIHBhcmFtc30pO1xuICB9XG5cbiAgcHVibGljIERFTEVURSh1cmw6IHN0cmluZywgaGVhZGVycz86IEh0dHBIZWFkZXJzLCBwYXJhbXM/OiBIdHRwUGFyYW1zKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwLmRlbGV0ZSh1cmwsIHtoZWFkZXJzLCBwYXJhbXN9KTtcbiAgfVxuXG59XG4iXX0=