import { __awaiter } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { HttpHeaders } from '@angular/common/http';
import { Subject } from 'rxjs';
import { map, switchMap, takeUntil } from 'rxjs/operators';
import { DEFAULT_INTERRUPTSOURCES } from '@ng-idle/core';
import { API, HTTP_SERVICE, oauthInfo, OAUTH_INFO, signatureHeader, } from '@dongkap/do-core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./storage/auth-indexeddb.service";
import * as i3 from "./storage/profile-indexeddb.service";
import * as i4 from "./storage/settings-indexeddb.service";
import * as i5 from "@ng-idle/core";
export class AuthTokenService {
    constructor(httpBaseService, oauthResource, apiPath, router, authIndexedDB, profileIndexedDB, settingsIndexedDB, idle) {
        this.httpBaseService = httpBaseService;
        this.oauthResource = oauthResource;
        this.apiPath = apiPath;
        this.router = router;
        this.authIndexedDB = authIndexedDB;
        this.profileIndexedDB = profileIndexedDB;
        this.settingsIndexedDB = settingsIndexedDB;
        this.idle = idle;
        this.destroy$ = new Subject();
        idle.setIdle(oauthResource['session_idle']);
        idle.setTimeout(oauthResource['session_timeout']);
        idle.setInterrupts(DEFAULT_INTERRUPTSOURCES);
        idle.onTimeout.subscribe(() => {
            /* console.log('[Dongkap] Session Timeout'); */
            this.logout();
        });
        idle.onIdleEnd.subscribe(() => {
            /* console.log('[Dongkap] Session Idle End'); */
        });
    }
    ngOnDestroy() {
        clearInterval(this.timer);
        this.destroy$.next(true);
        this.destroy$.next();
        this.destroy$.complete();
    }
    login(username, password) {
        this.authIndexedDB.logout();
        return this.httpBaseService.
            HTTP_BASE(this.apiPath['auth']['token'], this.getAuthBody(username, password).toString(), this.getAuthHeader())
            .pipe(takeUntil(this.destroy$))
            .toPromise()
            .then((response) => {
            this.idle.setIdle(+response['expires_in']);
            this.idle.watch();
            /* console.log('[DONGKAP] Session Idle Start'); */
            /* console.log('[DONGKAP] Session Timeout in ' + response['expires_in'] + ' seconds'); */
            this.authIndexedDB.loginStorage(response);
            this.profileIndexedDB.loginStorage(response);
            this.settingsIndexedDB.loginStorage(response);
        });
    }
    force(username, password) {
        this.authIndexedDB.logout();
        return this.httpBaseService.
            HTTP_BASE(this.apiPath['auth']['force'], this.getAuthBody(username, password).toString(), this.getAuthHeader())
            .pipe(takeUntil(this.destroy$))
            .toPromise()
            .then((response) => {
            this.idle.setIdle(+response['expires_in']);
            this.idle.watch();
            /* console.log('[DONGKAP] Session Idle Start'); */
            /* console.log('[DONGKAP] Session Timeout in ' + response['expires_in'] + ' seconds'); */
            this.authIndexedDB.loginStorage(response);
            this.profileIndexedDB.loginStorage(response);
            this.settingsIndexedDB.loginStorage(response);
        });
    }
    refresh() {
        return this.getBodyRefresh().pipe(switchMap((body) => {
            return this.httpBaseService.
                HTTP_BASE(this.apiPath['auth']['token'], body, this.getAuthHeader())
                .pipe(takeUntil(this.destroy$))
                .pipe(map((response) => {
                this.idle.setIdle(response['expires_in']);
                this.authIndexedDB.logout();
                this.authIndexedDB.loginStorage(response);
            }));
        }));
    }
    logout() {
        this.timer = setInterval(() => {
            this.doLogout();
        }, 5000);
        this.httpBaseService.HTTP_AUTH(this.apiPath['security']['revoke'])
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            this.doLogout();
        });
    }
    doLogout() {
        this.authIndexedDB.logout();
        this.profileIndexedDB.logout();
        clearInterval(this.timer);
        this.idle.stop();
        this.router.navigate(['/auth']);
    }
    isLogin() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.authIndexedDB.isLogin();
        });
    }
    oauthHeaders(request) {
        const result$ = new Subject();
        let httpHeaders = request.headers ? request.headers : new HttpHeaders();
        httpHeaders = httpHeaders.has(signatureHeader.authorization) ?
            httpHeaders.delete(signatureHeader.authorization) : httpHeaders;
        Promise.all([
            this.authIndexedDB.getEnc(oauthInfo.token_type),
            this.authIndexedDB.getEnc(oauthInfo.access_token)
        ])
            .then((value) => {
            httpHeaders = httpHeaders.set(signatureHeader.authorization, value[0] + ' ' + value[1]);
            result$.next(request.clone({ headers: httpHeaders }));
        });
        return result$.asObservable();
    }
    getAuthHeader() {
        return new HttpHeaders({
            'Content-Type': 'application/x-www-form-urlencoded',
            Authorization: 'Basic ' +
                btoa(this.oauthResource['client_id'] + ':' + this.oauthResource['client_secret']),
            Accept: 'application/json',
        });
    }
    getAuthBody(username, password) {
        const body = new URLSearchParams();
        body.append('client_id', this.oauthResource['client_id']);
        body.append('grant_type', this.oauthResource['grant_type']);
        body.append('username', username);
        body.append('password', password);
        body.append('platform', 'web');
        return body;
    }
    getBodyRefresh() {
        const result$ = new Subject();
        this.authIndexedDB.getEnc(oauthInfo.refresh_token).then((value) => {
            const body = new URLSearchParams();
            body.append('client_id', this.oauthResource['client_id']);
            body.append('grant_type', 'refresh_token');
            body.append('refresh_token', value);
            result$.next(body.toString());
        });
        return result$.asObservable();
    }
}
AuthTokenService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthTokenService, deps: [{ token: HTTP_SERVICE }, { token: OAUTH_INFO }, { token: API }, { token: i1.Router }, { token: i2.AuthIndexedDBService }, { token: i3.ProfileIndexedDBService }, { token: i4.SettingsIndexedDBService }, { token: i5.Idle }], target: i0.ɵɵFactoryTarget.Injectable });
AuthTokenService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthTokenService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthTokenService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [HTTP_SERVICE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [OAUTH_INFO]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [API]
                }] }, { type: i1.Router }, { type: i2.AuthIndexedDBService }, { type: i3.ProfileIndexedDBService }, { type: i4.SettingsIndexedDBService }, { type: i5.Idle }]; } });
//# sourceMappingURL=data:application/json;base64,