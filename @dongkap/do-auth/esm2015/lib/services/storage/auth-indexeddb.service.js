import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { additionalInfoModels, IndexedDBService, oauthInfo, oauthInfoModels, TypeDataOauth, } from '@dongkap/do-core';
import * as i0 from "@angular/core";
export class AuthIndexedDBService extends IndexedDBService {
    constructor(injector) {
        super(injector, 'do-core', 1, '#do-auth');
    }
    getEnc(key, storeName) {
        return __awaiter(this, void 0, void 0, function* () {
            const keyEncrypted = this.enc.getHmacSha256(this.oauthResource['private_key'], key, true);
            return ((yield this.$dbPromise).get(storeName ? storeName : '#do-auth', keyEncrypted)).then((value) => {
                return this.enc.decryptAES(this.oauthResource['aes_key'], value);
            });
        });
    }
    putEnc(key, val, storeName) {
        return __awaiter(this, void 0, void 0, function* () {
            const keyEncrypted = this.enc.getHmacSha256(this.oauthResource['private_key'], key, true);
            const valueEncrypted = this.enc.encryptAES(this.oauthResource['aes_key'], val);
            return (yield this.$dbPromise).put(storeName ? storeName : '#do-auth', valueEncrypted, keyEncrypted);
        });
    }
    removeEnc(key, storeName) {
        return __awaiter(this, void 0, void 0, function* () {
            const keyEncrypted = this.enc.getHmacSha256(this.oauthResource['private_key'], key, true);
            return (yield this.$dbPromise).delete(storeName ? storeName : '#do-auth', keyEncrypted);
        });
    }
    getOfEnc(key, storeName) {
        const result$ = new Subject();
        this.getEnc(key, storeName).then((value) => {
            result$.next(value);
        });
        return result$.asObservable();
    }
    putOfEnc(key, val, storeName) {
        const result$ = new Subject();
        this.putEnc(key, val, storeName).then((value) => {
            result$.next(value);
        });
        return result$.asObservable();
    }
    removeOfEnc(key, storeName) {
        const result$ = new Subject();
        this.removeEnc(key, storeName).then((value) => {
            result$.next(value);
        });
        return result$.asObservable();
    }
    loginStorage(response) {
        oauthInfoModels.forEach(data => {
            if (response[data.key]) {
                if (data.type === TypeDataOauth.OAUTH && data.persist) {
                    if (data.enc) {
                        this.putEnc(data.key, data.string ? response[data.key] : JSON.stringify(response[data.key])).then();
                    }
                    else {
                        this.put(data.key, data.string ? response[data.key] : JSON.stringify(response[data.key])).then();
                    }
                }
            }
        });
    }
    logout() {
        oauthInfoModels.forEach(data => {
            if (data.enc) {
                if (data.type === TypeDataOauth.OAUTH) {
                    this.removeEnc(data.key).then();
                }
            }
        });
        additionalInfoModels.forEach(data => {
            if (data.enc) {
                if (data.type === TypeDataOauth.OAUTH) {
                    this.removeEnc(data.key).then();
                }
            }
        });
    }
    isLogin() {
        return __awaiter(this, void 0, void 0, function* () {
            if (yield this.getEnc(oauthInfo.access_token)) {
                return true;
            }
            oauthInfoModels.forEach(data => {
                this.removeEnc(data.key).then();
            });
            return false;
        });
    }
}
AuthIndexedDBService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthIndexedDBService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
AuthIndexedDBService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthIndexedDBService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthIndexedDBService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,