import { Injectable, Inject } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { API, HTTP_SERVICE, UserService, } from '@dongkap/do-core';
import * as i0 from "@angular/core";
import * as i1 from "./storage/profile-indexeddb.service";
export class AuthUserService extends UserService {
    constructor(profileIndexedDB, apiPath, httpBaseService) {
        super();
        this.profileIndexedDB = profileIndexedDB;
        this.apiPath = apiPath;
        this.httpBaseService = httpBaseService;
        this.loaderUserSubject$ = new Subject();
        this.destroy$ = new Subject();
    }
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
        this.destroy$.unsubscribe();
    }
    loadUser() {
        this.profileIndexedDB.get('image').then((checksum) => {
            this.putImageBase64(checksum);
        });
        this.httpBaseService.HTTP_AUTH(this.apiPath['profile']['get-profile'])
            .pipe(takeUntil(this.destroy$))
            .subscribe((response) => {
            Promise.all([
                this.profileIndexedDB.put('name', response['name']),
                this.profileIndexedDB.put('email', response['email']),
                this.profileIndexedDB.put('image', response['image']),
            ]).then();
        });
    }
    updateName(name) {
        this.profileIndexedDB.put('name', name).then(() => {
            this.awaitUser();
        });
        return this.loaderUserSubject$.asObservable();
    }
    updatePhoto(checksum) {
        this.profileIndexedDB.put('image', checksum).then(() => {
            this.putImageBase64(checksum);
        });
        return this.loaderUserSubject$.asObservable();
    }
    get onUserChange() {
        this.awaitUser();
        return this.loaderUserSubject$.asObservable();
    }
    awaitUser() {
        Promise.all([
            this.profileIndexedDB.get('name'),
            this.profileIndexedDB.get('image-base64'),
        ]).then((value) => {
            const user = {
                name: value[0],
                image: value[1],
            };
            this.loaderUserSubject$.next(user);
        });
    }
    putImageBase64(checksum) {
        if (checksum) {
            this.httpBaseService.HTTP_AUTH(this.apiPath['profile']['get-photo-profile'], null, null, null, [checksum], 'arraybuffer')
                .pipe(takeUntil(this.destroy$))
                .subscribe((response) => {
                const imageBlob = new Blob([response], {
                    type: 'image/png',
                });
                const reader = new FileReader();
                reader.readAsDataURL(imageBlob);
                reader.onloadend = () => {
                    const imageBase64 = reader.result.toString();
                    this.profileIndexedDB.put('image-base64', imageBase64).then(() => {
                        this.awaitUser();
                    });
                };
            });
        }
    }
}
AuthUserService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthUserService, deps: [{ token: i1.ProfileIndexedDBService }, { token: API }, { token: HTTP_SERVICE }], target: i0.ɵɵFactoryTarget.Injectable });
AuthUserService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthUserService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AuthUserService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ProfileIndexedDBService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [API]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [HTTP_SERVICE]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,