import { Component, Inject } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
import { HttpErrorResponse, HttpHeaders } from '@angular/common/http';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { API, HTTP_SERVICE, OAUTH_INFO, ResponseCode, } from '@dongkap/do-core';
import { TermsConditionsComponent } from '../terms-conditions/terms-conditions.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@nebular/theme";
import * as i3 from "@ngx-translate/core";
import * as i4 from "../../services/auth-token.service";
import * as i5 from "../../services/auth-force.service";
import * as i6 from "@angular/common";
import * as i7 from "@angular/forms";
export class LoginPageComponent {
    constructor(router, dialogService, translate, authTokenService, authForceService, apiPath, httpBaseService, oauthResource, route) {
        this.router = router;
        this.dialogService = dialogService;
        this.translate = translate;
        this.authTokenService = authTokenService;
        this.authForceService = authForceService;
        this.apiPath = apiPath;
        this.httpBaseService = httpBaseService;
        this.oauthResource = oauthResource;
        this.buttonLogin = false;
        this.showPassword = false;
        this.icon = 'eye-outline';
        this.progress = 25;
        this.destroy$ = new Subject();
        this.formGroup = new FormGroup({
            username: new FormControl(),
            password: new FormControl(),
        });
        this.urlAuthorizeGoogle = this.httpBaseService.API(this.apiPath['auth']['authorize']) +
            '/google?redirect_uri=' +
            `${document.getElementsByTagName('base')[0].href}auth/callback`;
        this.socialLinks = [
            {
                url: this.urlAuthorizeGoogle,
                target: '_self',
                icon: 'google',
            }
        ];
        if (route.snapshot.queryParams['error']) {
            this.responseError = 'error.' + route.snapshot.queryParams['error'];
        }
    }
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
        this.destroy$.unsubscribe();
    }
    login() {
        if (!this.formGroup.invalid) {
            this.initProgress();
            if (this.progress < 35) {
                this.setProgress(this.progress = 35);
            }
            this.buttonLogin = true;
            this.authTokenService.login(this.formGroup.get('username').value, this.formGroup.get('password').value)
                .then(() => {
                this.setProgress(this.progress = 95);
                this.progress = 0;
                this.responseError = null;
                this.router.navigate(['/app/home']);
            })
                .catch((error) => {
                try {
                    if (error instanceof HttpErrorResponse) {
                        error = error['error'];
                    }
                    const response = error;
                    this.responseErrorCode = response === null || response === void 0 ? void 0 : response.respStatusCode;
                    this.responseError = response === null || response === void 0 ? void 0 : response.respStatusMessage[response === null || response === void 0 ? void 0 : response.respStatusCode];
                }
                catch (error) {
                    this.responseError = 'error.500';
                }
                this.buttonLogin = false;
                this.progress = 0;
                this.doneProgress();
                if (this.responseErrorCode === ResponseCode.ERR_SCR0000.toString()) {
                    this.authForceService.setData(this.formGroup.get('username').value, this.formGroup.get('password').value);
                    this.router.navigate(['/auth/force']);
                }
            });
            if (this.progress >= 35 && this.progress < 65) {
                this.setProgress(this.progress = 65);
            }
        }
    }
    onShowPassword() {
        this.showPassword = !this.showPassword;
        this.icon = this.showPassword ? 'eye-off-outline' : 'eye-outline';
    }
    get hasErrorUsername() {
        return (this.formGroup.controls['username'] &&
            this.formGroup.controls['username'].invalid &&
            this.formGroup.controls['username'].touched);
    }
    get hasSuccessUsername() {
        return (this.formGroup.controls['username'] &&
            this.formGroup.controls['username'].valid &&
            this.formGroup.controls['username'].touched);
    }
    get hasErrorPassword() {
        return (this.formGroup.controls['password'] &&
            this.formGroup.controls['password'].invalid &&
            this.formGroup.controls['password'].touched);
    }
    get hasSuccessPassword() {
        return (this.formGroup.controls['password'] &&
            this.formGroup.controls['password'].valid &&
            this.formGroup.controls['password'].touched);
    }
    onClickTermsConditions() {
        const data = {
            parameterCode: 'TERMS_CONDITIONS.DONGKAP'
        };
        const httpHeaders = new HttpHeaders({
            Authorization: 'Basic ' + btoa(this.oauthResource['client_id'] + ':' + this.oauthResource['client_secret']),
            'Content-Type': 'application/json',
            'Accept-Language': this.translate.currentLang,
        });
        this.httpBaseService.HTTP_BASE(this.apiPath['openapi']['parameter'], data, httpHeaders)
            .pipe(takeUntil(this.destroy$))
            .subscribe((response) => {
            this.dialogService.open(TermsConditionsComponent, {
                context: {
                    content: response['parameterValue'],
                    action: 'Close',
                },
            });
        });
    }
    initProgress() {
        document.querySelectorAll('.pace-done').forEach(pace => {
            pace.className = pace.className.replace('pace-done pace-done', 'pace-running');
            pace.className = pace.className.replace('pace-done', 'pace-running');
        });
        document.querySelectorAll('.pace-inactive').forEach(pace => {
            pace.className = pace.className.replace('pace-inactive pace-inactive', 'pace-active');
            pace.className = pace.className.replace('pace-inactive', 'pace-active');
        });
        this.progressDOM = document.getElementsByClassName('pace-progress').item(0);
    }
    doneProgress() {
        document.querySelectorAll('.pace-running').forEach(pace => {
            pace.className = pace.className.replace('pace-running', 'pace-done');
        });
        document.querySelectorAll('.pace-active').forEach(pace => {
            pace.className = pace.className.replace('pace-active', 'pace-inactive');
        });
    }
    setProgress(progress) {
        this.progressDOM.style.transform = 'translate3d(' + progress + '%, 0px, 0px)';
        this.progressDOM.getAttributeNode('data-progress-text').value = progress + '%';
        this.progressDOM.getAttributeNode('data-progress').value = progress.toString();
    }
}
LoginPageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoginPageComponent, deps: [{ token: i1.Router }, { token: i2.NbDialogService }, { token: i3.TranslateService }, { token: i4.AuthTokenService }, { token: i5.AuthForceService }, { token: API }, { token: HTTP_SERVICE }, { token: OAUTH_INFO }, { token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
LoginPageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LoginPageComponent, selector: "do-login-page", ngImport: i0, template: "<h1 id=\"title\" class=\"title\">{{ 'Login' | translate }}</h1>\n<p class=\"sub-title\">{{ 'subtitle.login' | translate }}</p>\n<nb-alert *ngIf=\"responseError\" outline=\"danger\" role=\"alert\">\n  <p class=\"alert-title\"><b>{{ 'alert.title.login' | translate }}</b></p>\n  <ul class=\"alert-message-list\">\n    <li class=\"alert-message\">{{ responseError | translate }}</li>\n  </ul>\n</nb-alert>\n\n<form [formGroup]=\"formGroup\" (ngSubmit)=\"login()\" aria-labelledby=\"title\">\n  <div class=\"form-control-group\">\n    <label class=\"label\">{{ 'message.username-login' | translate }} :</label>\n    <input [formControlName]=\"'username'\"\n          [required]=\"true\"\n          [ngClass]=\"{\n            'status-danger': hasErrorUsername,\n            'status-success': hasSuccessUsername\n          }\"\n          name=\"username\"\n          id=\"inputUsername\"\n          placeholder=\"{{ 'message.username-login-placeholder' | translate }}\"\n          fieldSize=\"large\"\n          tabindex=\"1\"\n          autofocus\n          nbInput\n          fullWidth>\n    <ng-container *ngIf=\"hasErrorUsername\">\n      <span class=\"caption status-danger\">{{'error.username-login' | translate}}</span>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <span class=\"label-with-link\">\n      <label class=\"label\">{{ 'Password' | translate }} :</label>\n      <a class=\"forgot-password caption-2\" routerLink=\"/auth/forgot-password\" tabindex=\"-1\">{{ 'Forgot Password' | translate}}?</a>\n    </span>\n    <div class=\"input-group\">\n      <input [formControlName]=\"'password'\"\n            [required]=\"true\"\n            [ngClass]=\"{\n              'status-danger': hasErrorPassword,\n              'status-success': hasSuccessPassword\n            }\"\n            name=\"password\"\n            [type]=\"!showPassword ? 'password' : 'text'\"\n            id=\"inputPassword\"\n            placeholder=\"{{ 'Password' | translate }}\"\n            fieldSize=\"large\"\n            tabindex=\"2\"\n            nbInput\n            fullWidth>\n      <div class=\"input-icon\">\n        <nb-icon [options]=\"{ animation: { type: 'zoom' } }\" class=\"input-icon-hover\" icon=\"{{icon}}\" (click)=\"onShowPassword()\"></nb-icon>\n      </div>\n    </div>\n    <ng-container *ngIf=\"hasErrorPassword\">\n      <span class=\"caption status-danger\">{{ 'error.password' | translate}}</span>\n    </ng-container>\n  </div>\n\n  <button [disabled]=\"formGroup.invalid || buttonLogin\"\n          fullWidth\n          nbButton\n          status=\"primary\"\n          size=\"large\"\n          [class.btn-pulse]=\"formGroup.invalid || buttonLogin\">\n    {{ 'Login' | translate }}\n  </button>\n</form>\n<!--\n<section *ngIf=\"socialLinks && socialLinks.length > 0\" class=\"links\" aria-label=\"Social sign in\">\n  {{ 'message.login-footer-social' | translate}}:\n  <div class=\"socials\">\n    <ng-container *ngFor=\"let socialLink of socialLinks\">\n      <a *ngIf=\"socialLink.link\"\n         [routerLink]=\"socialLink.link\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">\n        <nb-icon *ngIf=\"socialLink.icon; else title\" [icon]=\"socialLink.icon\"></nb-icon>\n        <ng-template #title>{{ socialLink.title }}</ng-template>\n      </a>\n      <a *ngIf=\"socialLink.url\"\n         [attr.href]=\"socialLink.url\"\n         [attr.target]=\"socialLink.target\"\n         [attr.class]=\"socialLink.icon\"\n         [class.with-icon]=\"socialLink.icon\">\n        <nb-icon *ngIf=\"socialLink.icon; else title\" [icon]=\"socialLink.icon\"></nb-icon>\n        <ng-template #title>{{ socialLink.title }}</ng-template>\n      </a>\n    </ng-container>\n  </div>\n</section>\n\n<section class=\"another-action\" aria-label=\"Register\">\n  {{ 'message.login-footer' | translate}} <a class=\"text-link\" routerLink=\"/auth/register\">{{ 'Register' | translate}}</a>\n</section>\n-->\n<section class=\"another-action\" aria-label=\"Terms and Conditions\">\n  <span class=\"terms-conditions\" (click)=\"onClickTermsConditions()\" tabindex=\"-1\">{{ 'message.terms-conditions' | translate}}</span>\n</section>\n", styles: [".nb-theme-default :host nb-icon{color:#8f9bb3}.nb-theme-default :host .input-icon{position:absolute;right:0;padding:.9rem}.nb-theme-default :host .input-icon-hover:hover{color:#598bff;cursor:pointer}.nb-theme-default :host .terms-conditions{color:#36f;text-decoration:underline;font-size:inherit;font-style:inherit;font-weight:inherit;line-height:inherit;cursor:pointer}.nb-theme-default :host .terms-conditions:hover{color:#598bff}.nb-theme-dark :host nb-icon{color:#8f9bb3}.nb-theme-dark :host .input-icon{position:absolute;right:0;padding:.9rem}.nb-theme-dark :host .input-icon-hover:hover{color:#598bff;cursor:pointer}.nb-theme-dark :host .terms-conditions{color:#36f;text-decoration:underline;font-size:inherit;font-style:inherit;font-weight:inherit;line-height:inherit;cursor:pointer}.nb-theme-dark :host .terms-conditions:hover{color:#598bff}.nb-theme-cosmic :host nb-icon{color:#8f9bb3}.nb-theme-cosmic :host .input-icon{position:absolute;right:0;padding:.9rem}.nb-theme-cosmic :host .input-icon-hover:hover{color:#598bff;cursor:pointer}.nb-theme-cosmic :host .terms-conditions{color:#36f;text-decoration:underline;font-size:inherit;font-style:inherit;font-weight:inherit;line-height:inherit;cursor:pointer}.nb-theme-cosmic :host .terms-conditions:hover{color:#598bff}.nb-theme-corporate :host nb-icon{color:#8f9bb3}.nb-theme-corporate :host .input-icon{position:absolute;right:0;padding:.9rem}.nb-theme-corporate :host .input-icon-hover:hover{color:#598bff;cursor:pointer}.nb-theme-corporate :host .terms-conditions{color:#36f;text-decoration:underline;font-size:inherit;font-style:inherit;font-weight:inherit;line-height:inherit;cursor:pointer}.nb-theme-corporate :host .terms-conditions:hover{color:#598bff}\n"], components: [{ type: i2.NbAlertComponent, selector: "nb-alert", inputs: ["size", "status", "accent", "outline", "closable"], outputs: ["close"] }, { type: i2.NbIconComponent, selector: "nb-icon", inputs: ["config", "icon", "pack", "status", "options"] }, { type: i2.NbButtonComponent, selector: "button[nbButton],a[nbButton],input[type=\"button\"][nbButton],input[type=\"submit\"][nbButton]", inputs: ["hero"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i7.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i7.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i2.NbInputDirective, selector: "input[nbInput],textarea[nbInput]", inputs: ["fieldSize", "status", "shape", "fullWidth"] }, { type: i7.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i7.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i7.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "translate": i3.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LoginPageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'do-login-page',
                    styleUrls: ['login-page.component.scss'],
                    templateUrl: 'login-page.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.NbDialogService }, { type: i3.TranslateService }, { type: i4.AuthTokenService }, { type: i5.AuthForceService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [API]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [HTTP_SERVICE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [OAUTH_INFO]
                }] }, { type: i1.ActivatedRoute }]; } });
//# sourceMappingURL=data:application/json;base64,