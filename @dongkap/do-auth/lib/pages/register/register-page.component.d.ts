import { OnDestroy } from '@angular/core';
import { FormGroup, ValidatorFn, AsyncValidatorFn } from '@angular/forms';
import { Router } from '@angular/router';
import { Subject } from 'rxjs';
import { TranslateService } from '@ngx-translate/core';
import { NbDialogService } from '@nebular/theme';
import { EncryptionService } from '@dongkap/do-core';
import { APIModel } from '@dongkap/do-core';
import { HttpFactoryService } from '@dongkap/do-core';
import { SecurityResourceModel } from '@dongkap/do-core';
import { DoToastrService } from '@dongkap/do-shared';
import * as i0 from "@angular/core";
export declare class RegisterPageComponent implements OnDestroy {
    private router;
    private enc;
    private toastr;
    private dialogService;
    private translate;
    private httpBaseService;
    private oauthResource;
    private apiPath;
    patternFullname: string;
    patternUsername: string;
    patternEmail: string;
    patternPassword: string;
    errorMsgFullname: string;
    errorMsgUsername: string;
    errorMsgEmail: string;
    errorMsgPassword: string;
    errorMsgConfirmPassword: string;
    paramMsgUsername: any;
    paramMsgEmail: any;
    minlengthUsername: number;
    minlengthEmail: number;
    form: FormGroup;
    responseError: any;
    buttonRegister: boolean;
    private progressBar;
    protected progressDOM: HTMLElement;
    private isCheckUsername;
    private isCheckEmail;
    protected destroy$: Subject<any>;
    constructor(router: Router, enc: EncryptionService, toastr: DoToastrService, dialogService: NbDialogService, translate: TranslateService, httpBaseService: HttpFactoryService, oauthResource: SecurityResourceModel, apiPath: APIModel);
    ngOnDestroy(): void;
    register(): void;
    get hasErrorFullname(): boolean;
    get hasSuccessFullname(): boolean;
    get hasErrorUsername(): boolean;
    get hasSuccessUsername(): boolean;
    get hasErrorEmail(): boolean;
    get hasSuccessEmail(): boolean;
    get hasErrorPassword(): boolean;
    get hasSuccessPassword(): boolean;
    get hasErrorConfirmPassword(): boolean;
    get hasSuccessConfirmPassword(): boolean;
    onCheckedChange(): void;
    onClickTermsConditions(): void;
    onKeyDownUsername(event: KeyboardEvent): void;
    onKeyDownEmail(event: KeyboardEvent): void;
    protected initProgress(): void;
    protected doneProgress(): void;
    protected setProgress(progress: number): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RegisterPageComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RegisterPageComponent, "do-register-page", never, {}, {}, never, never>;
}
export declare function confirmPasswordValidator(form: FormGroup): ValidatorFn;
export declare function userValidator(oauthResource: SecurityResourceModel, httpBaseService: HttpFactoryService, apiPath: APIModel): AsyncValidatorFn;
